{
    "manifests": {
        "symfony/messenger": {
            "manifest": {
                "copy-from-recipe": {
                    "config/": "%CONFIG_DIR%/"
                },
                "env": {
                    "#1": "Choose one of the transports below",
                    "#2": "MESSENGER_TRANSPORT_DSN=doctrine://default",
                    "#3": "MESSENGER_TRANSPORT_DSN=amqp://guest:guest@localhost:5672/%2f/messages",
                    "#4": "MESSENGER_TRANSPORT_DSN=redis://localhost:6379/messages"
                },
                "conflict": {
                    "symfony/framework-bundle": "<4.3"
                },
                "post-install-output": [
                    "  * You're ready to use the Messenger component. You can define your own message buses",
                    "    or start using the default one right now by injecting the <info>message_bus</info> service",
                    "    or type-hinting <info>Symfony\\Component\\Messenger\\MessageBusInterface</info> in your code.",
                    "",
                    "  * To send messages to a transport and handle them asynchronously:",
                    "",
                    "    1. Uncomment the <info>MESSENGER_TRANSPORT_DSN</> env var in <comment>.env</>",
                    "       and <info>framework.messenger.transports.async</> in <comment>config/packages/messenger.yaml</>;",
                    "    2. Route your message classes to the async transport in <comment>config/packages/messenger.yaml</>.",
                    "",
                    "  * <fg=blue>Read</> the documentation at <comment>https://symfony.com/doc/current/messenger.html</>"
                ]
            },
            "files": {
                "config/packages/messenger.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "use Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;",
                        "",
                        "return static function (ContainerConfigurator $containerConfigurator): void {",
                        "    $containerConfigurator->extension('framework', [",
                        "        'messenger' => [",
                        "            'reset_on_message' => true,",
                        "            'transports' => null,",
                        "            'routing' => null,",
                        "        ],",
                        "    ]);",
                        "};",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "87581de85acb27b7237104adbfde9210112c04a5"
        }
    }
}
