{
    "manifests": {
        "symfony/framework-bundle": {
            "manifest": {
                "bundles": {
                    "Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle": [
                        "all"
                    ]
                },
                "copy-from-recipe": {
                    "config/": "%CONFIG_DIR%/",
                    "public/": "%PUBLIC_DIR%/",
                    "src/": "%SRC_DIR%/"
                },
                "composer-scripts": {
                    "cache:clear": "symfony-cmd",
                    "assets:install %PUBLIC_DIR%": "symfony-cmd"
                },
                "env": {
                    "APP_ENV": "dev",
                    "APP_SECRET": "%generate(secret)%",
                    "#TRUSTED_PROXIES": "127.0.0.1,127.0.0.2",
                    "#TRUSTED_HOSTS": "'^(localhost|example\\.com)$'"
                },
                "gitignore": [
                    "/.env.local",
                    "/.env.local.php",
                    "/.env.*.local",
                    "/%PUBLIC_DIR%/bundles/",
                    "/%VAR_DIR%/",
                    "/vendor/"
                ],
                "post-install-output": [
                    "  * <fg=blue>Run</> your application:",
                    "    1. Go to the project directory",
                    "    2. Create your code repository with the <comment>git init</comment> command",
                    "    3. Download the Symfony CLI at <comment>https://symfony.com/download</> to install a development web server,",
                    "       or run <comment>composer require server --dev</> for a minimalist one",
                    "",
                    "  * <fg=blue>Read</> the documentation at <comment>https://symfony.com/doc</>"
                ]
            },
            "files": {
                "config/bootstrap.php": {
                    "contents": [
                        "<?php",
                        "",
                        "use Symfony\\Component\\Dotenv\\Dotenv;",
                        "",
                        "require dirname(__DIR__).'/vendor/autoload.php';",
                        "",
                        "if (!class_exists(Dotenv::class)) {",
                        "    throw new LogicException('Please run \"composer require symfony/dotenv\" to load the \".env\" files configuring the application.');",
                        "}",
                        "",
                        "// Load cached env vars if the .env.local.php file exists",
                        "// Run \"composer dump-env prod\" to create it (requires symfony/flex >=1.2)",
                        "if (is_array($env = @include dirname(__DIR__).'/.env.local.php') && (!isset($env['APP_ENV']) || ($_SERVER['APP_ENV'] ?? $_ENV['APP_ENV'] ?? $env['APP_ENV']) === $env['APP_ENV'])) {",
                        "    (new Dotenv(false))->populate($env);",
                        "} else {",
                        "    $path = dirname(__DIR__).'/.env';",
                        "    $dotenv = new Dotenv(false);",
                        "",
                        "    // load all the .env files",
                        "    if (method_exists($dotenv, 'loadEnv')) {",
                        "        $dotenv->loadEnv($path);",
                        "    } else {",
                        "        // fallback code in case your Dotenv component is not 4.2 or higher (when loadEnv() was added)",
                        "",
                        "        if (file_exists($path) || !file_exists($p = \"$path.dist\")) {",
                        "            $dotenv->load($path);",
                        "        } else {",
                        "            $dotenv->load($p);",
                        "        }",
                        "",
                        "        if (null === $env = $_SERVER['APP_ENV'] ?? $_ENV['APP_ENV'] ?? null) {",
                        "            $dotenv->populate([",
                        "                'APP_ENV' => $env = 'dev',",
                        "            ]);",
                        "        }",
                        "",
                        "        if ('test' !== $env && file_exists($p = \"$path.local\")) {",
                        "            $dotenv->load($p);",
                        "            $env = $_SERVER['APP_ENV'] ?? $_ENV['APP_ENV'] ?? $env;",
                        "        }",
                        "",
                        "        if (file_exists($p = \"$path.$env\")) {",
                        "            $dotenv->load($p);",
                        "        }",
                        "",
                        "        if (file_exists($p = \"$path.$env.local\")) {",
                        "            $dotenv->load($p);",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "$_SERVER += $_ENV;",
                        "$_SERVER['APP_ENV'] = $_ENV['APP_ENV'] = ($_SERVER['APP_ENV'] ?? $_ENV['APP_ENV'] ?? null) ?: 'dev';",
                        "$_SERVER['APP_DEBUG'] = $_SERVER['APP_DEBUG'] ?? $_ENV['APP_DEBUG'] ?? 'prod' !== $_SERVER['APP_ENV'];",
                        "$_SERVER['APP_DEBUG'] = $_ENV['APP_DEBUG'] = (int) $_SERVER['APP_DEBUG'] || filter_var($_SERVER['APP_DEBUG'], FILTER_VALIDATE_BOOLEAN) ? '1' : '0';",
                        ""
                    ],
                    "executable": false
                },
                "config/packages/cache.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "use Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;",
                        "",
                        "return static function (ContainerConfigurator $containerConfigurator): void {",
                        "    $containerConfigurator->extension('framework', [",
                        "        'cache' => null,",
                        "    ]);",
                        "};",
                        ""
                    ],
                    "executable": false
                },
                "config/packages/framework.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "use Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;",
                        "",
                        "return static function (ContainerConfigurator $containerConfigurator): void {",
                        "    $containerConfigurator->extension('framework', [",
                        "        'secret' => '%env(APP_SECRET)%',",
                        "        'session' => [",
                        "            'handler_id' => null,",
                        "        ],",
                        "        'php_errors' => [",
                        "            'log' => true,",
                        "        ],",
                        "    ]);",
                        "};",
                        ""
                    ],
                    "executable": false
                },
                "config/packages/test/framework.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "use Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;",
                        "",
                        "return static function (ContainerConfigurator $containerConfigurator): void {",
                        "    $containerConfigurator->extension('framework', [",
                        "        'test' => true,",
                        "        'session' => [",
                        "            'storage_id' => 'session.storage.mock_file',",
                        "        ],",
                        "    ]);",
                        "};",
                        ""
                    ],
                    "executable": false
                },
                "config/services.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "use Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;",
                        "",
                        "return static function (ContainerConfigurator $containerConfigurator): void {",
                        "    $services = $containerConfigurator->services();",
                        "",
                        "    $services->defaults()",
                        "        ->autowire()",
                        "        ->autoconfigure();",
                        "",
                        "    $services->load('App\\\\', __DIR__.'/../src/*')",
                        "        ->exclude([__DIR__.'/../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}']);",
                        "",
                        "    $services->load('App\\Controller\\\\', __DIR__.'/../src/Controller')",
                        "        ->tag('controller.service_arguments');",
                        "};",
                        ""
                    ],
                    "executable": false
                },
                "public/index.php": {
                    "contents": [
                        "<?php",
                        "",
                        "use App\\Kernel;",
                        "use Symfony\\Component\\Debug\\Debug;",
                        "use Symfony\\Component\\HttpFoundation\\Request;",
                        "",
                        "require dirname(__DIR__).'/config/bootstrap.php';",
                        "",
                        "if ($_SERVER['APP_DEBUG']) {",
                        "    umask(0000);",
                        "",
                        "    Debug::enable();",
                        "}",
                        "",
                        "if ($trustedProxies = $_SERVER['TRUSTED_PROXIES'] ?? false) {",
                        "    Request::setTrustedProxies(explode(',', $trustedProxies), Request::HEADER_X_FORWARDED_FOR | Request::HEADER_X_FORWARDED_PORT | Request::HEADER_X_FORWARDED_PROTO);",
                        "}",
                        "",
                        "if ($trustedHosts = $_SERVER['TRUSTED_HOSTS'] ?? false) {",
                        "    Request::setTrustedHosts([$trustedHosts]);",
                        "}",
                        "",
                        "$kernel = new Kernel($_SERVER['APP_ENV'], (bool) $_SERVER['APP_DEBUG']);",
                        "$request = Request::createFromGlobals();",
                        "$response = $kernel->handle($request);",
                        "$response->send();",
                        "$kernel->terminate($request, $response);",
                        ""
                    ],
                    "executable": false
                },
                "src/Controller/.gitignore": {
                    "contents": [
                        ""
                    ],
                    "executable": false
                },
                "src/Kernel.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace App;",
                        "",
                        "use Symfony\\Bundle\\FrameworkBundle\\Kernel\\MicroKernelTrait;",
                        "use Symfony\\Component\\Config\\Loader\\LoaderInterface;",
                        "use Symfony\\Component\\Config\\Resource\\FileResource;",
                        "use Symfony\\Component\\DependencyInjection\\ContainerBuilder;",
                        "use Symfony\\Component\\HttpKernel\\Kernel as BaseKernel;",
                        "use Symfony\\Component\\Routing\\RouteCollectionBuilder;",
                        "",
                        "class Kernel extends BaseKernel",
                        "{",
                        "    use MicroKernelTrait;",
                        "",
                        "    const CONFIG_EXTS = '.{php,xml,yaml,yml}';",
                        "",
                        "    public function getCacheDir()",
                        "    {",
                        "        return $this->getProjectDir().'/var/cache/'.$this->environment;",
                        "    }",
                        "",
                        "    public function getLogDir()",
                        "    {",
                        "        return $this->getProjectDir().'/var/log';",
                        "    }",
                        "",
                        "    public function registerBundles()",
                        "    {",
                        "        $contents = require $this->getProjectDir().'/config/bundles.php';",
                        "        foreach ($contents as $class => $envs) {",
                        "            if ($envs[$this->environment] ?? $envs['all'] ?? false) {",
                        "                yield new $class();",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    protected function configureContainer(ContainerBuilder $container, LoaderInterface $loader)",
                        "    {",
                        "        $container->addResource(new FileResource($this->getProjectDir().'/config/bundles.php'));",
                        "        // Feel free to remove the \"container.autowiring.strict_mode\" parameter",
                        "        // if you are using symfony/dependency-injection 4.0+ as it's the default behavior",
                        "        $container->setParameter('container.autowiring.strict_mode', true);",
                        "        $container->setParameter('container.dumper.inline_class_loader', true);",
                        "        $confDir = $this->getProjectDir().'/config';",
                        "",
                        "        $loader->load($confDir.'/{packages}/*'.self::CONFIG_EXTS, 'glob');",
                        "        $loader->load($confDir.'/{packages}/'.$this->environment.'/*'.self::CONFIG_EXTS, 'glob');",
                        "        $loader->load($confDir.'/{services}'.self::CONFIG_EXTS, 'glob');",
                        "        $loader->load($confDir.'/{services}_'.$this->environment.self::CONFIG_EXTS, 'glob');",
                        "    }",
                        "",
                        "    protected function configureRoutes(RouteCollectionBuilder $routes)",
                        "    {",
                        "        $confDir = $this->getProjectDir().'/config';",
                        "",
                        "        $routes->import($confDir.'/{routes}/'.$this->environment.'/*'.self::CONFIG_EXTS, '/', 'glob');",
                        "        $routes->import($confDir.'/{routes}/*'.self::CONFIG_EXTS, '/', 'glob');",
                        "        $routes->import($confDir.'/{routes}'.self::CONFIG_EXTS, '/', 'glob');",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "5b73c42d671d6e032e61701edd7986919ba78df0"
        }
    }
}
